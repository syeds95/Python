/* Top 3 HCPCS by revenue per Channel × Item_Group × Month */
WITH m AS (
  SELECT
    DATE_TRUNC('month', order_date)              AS order_month,
    channel,
    Item_Group,
    HCPCS,
    SUM(line_amount_robust)                      AS hcpcs_revenue,
    COUNT(DISTINCT OrderNumber)                  AS orders,
    COUNT(DISTINCT PatientID)                    AS patients
  FROM ANL_LINES
  GROUP BY 1,2,3,4
),
seg AS (
  SELECT order_month, channel, Item_Group, SUM(hcpcs_revenue) AS segment_revenue
  FROM m
  GROUP BY 1,2,3
),
ranked AS (
  SELECT
    m.order_month,
    m.channel,
    m.Item_Group,
    m.HCPCS,
    m.hcpcs_revenue,
    m.orders,
    m.patients,
    s.segment_revenue,
    DENSE_RANK() OVER (PARTITION BY m.order_month, m.channel, m.Item_Group
                       ORDER BY m.hcpcs_revenue DESC)                     AS rnk,
    SUM(m.hcpcs_revenue) OVER (PARTITION BY m.order_month, m.channel, m.Item_Group
                               ORDER BY m.hcpcs_revenue DESC
                               ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cum_revenue
  FROM m
  JOIN seg s USING (order_month, channel, Item_Group)
)
SELECT
  order_month,
  channel,
  Item_Group,
  HCPCS,
  hcpcs_revenue,
  ROUND(100 * (hcpcs_revenue / NULLIF(segment_revenue,0)), 1)  AS rev_share_pct,
  ROUND(100 * (cum_revenue / NULLIF(segment_revenue,0)), 1)    AS cum_share_pct,
  orders,
  patients,
  rnk
FROM ranked
WHERE rnk <= 3   -- keep ties at 3
ORDER BY order_month, channel, Item_Group, rnk, hcpcs_revenue DESC;
